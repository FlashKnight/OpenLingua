#tag ClassProtected Class UndoEditFieldInherits EditFieldImplements Undoable	#tag Event		Sub EnableMenuItems()		  if mIgnoreEvents then return		  mIgnoreEvents = true		  EnableMenuItems()		  mIgnoreEvents = false		  		  if Undoer <> nil then		    EditUndo.Enabled = Undoer.CanUndo		    EditRedo.Enabled = Undoer.CanRedo		  end		End Sub	#tag EndEvent	#tag Event		Sub LostFocus()		  if mIgnoreEvents then return		  mIgnoreEvents = true		  LostFocus()		  mIgnoreEvents = false		  		  doBackup true		  		End Sub	#tag EndEvent	#tag Event		Sub Open()		  Open()		  		End Sub	#tag EndEvent	#tag Event		Sub SelChange()		  if mIgnoreEvents then return		  mIgnoreEvents = true		  SelChange()		  mIgnoreEvents = false		  		  #if UseLogWin		    LogWin.AddLine "selchange "+Str(me.SelStart)		  #endif		  		  if mPreviousSelStart <> me.SelStart or mPreviousSelLength <> me.SelLength then		    doBackup true		  end		  		End Sub	#tag EndEvent	#tag Event		Sub TextChange()		  if mIgnoreEvents then return		  mIgnoreEvents = true		  TextChange()		  mIgnoreEvents = false		  		  #if UseLogWin		    LogWin.AddLine "txtchange "+Str(me.SelStart)		  #endif		  		  doBackup false		  		End Sub	#tag EndEvent	#tag MenuHandler		Function EditPaste() As Boolean Handles EditPaste.Action			#if UseLogWin			LogWin.AddLine "Paste "+Str(me.SelStart)			#endif			doBackup true			return false		End Function	#tag EndMenuHandler	#tag MenuHandler		Function EditRedo() As Boolean Handles EditRedo.Action			if Undoer.CanRedo then			Undoer.Redo			Return True			end		End Function	#tag EndMenuHandler	#tag MenuHandler		Function EditUndo() As Boolean Handles EditUndo.Action			if Undoer.CanUndo then			Undoer.Undo			Return True			end		End Function	#tag EndMenuHandler	#tag Method, Flags = &h1		Protected Function Backup(ByRef objRef as Variant, forRestore as Boolean) As Variant		  // Part of the Undoable interface.		  		  UndoAccessObj (objRef)		  		  dim pos, len as Integer, txt as String		  		  if mUsePrevious then		    mUsePrevious = false		    txt = mPreviousText		    pos = mPreviousSelStart		    len = mPreviousSelLength		  else		    txt = theText		    pos = me.SelStart		    len = me.SelLength		  end		  		  dim va as new Dictionary		  va.Value("txt") = txt		  va.Value("pos") = pos		  va.Value("len") = len		  		  #if UseLogWin		    LogWin.AddLine "Saving pos "+Str(pos)+", txt "+ReplaceLineEndings(txt, " / ")		    showStatus "Backup"		  #endif		  		  return va		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub doBackup(forceNewEntry as Boolean)		  if mIsSetup and Undoer <> nil then		    if forceNewEntry then		      #if UseLogWin		        LogWin.AddLine "new recording"		      #endif		      mStartNewRecording = true		    else		      if mBackedUpText <> theText then		        if mStartNewRecording or not mChanged then		          #if UseLogWin		            LogWin.AddLine "3 - pos "+Str(me.SelStart)		          #endif		          mStartNewRecording = false		          mChanged = true		          mUsePrevious = true // gets reset in Backup()		          Undoer.Backup "Text change", me, UndoObjRef()		          mBackedUpText = mPreviousText		        else		          #if UseLogWin		            LogWin.AddLine "4 - pos "+Str(me.SelStart)		          #endif		        end		      elseif mChanged then		        #if UseLogWin		          LogWin.AddLine "5 - pos "+Str(me.SelStart)		        #endif		        mChanged = false		        Undoer.Pop		      else		        #if UseLogWin		          LogWin.AddLine "6 - pos "+Str(me.SelStart)		        #endif		      end		      mPreviousText = theText		    end		    mPreviousSelStart = me.SelStart		    mPreviousSelLength = me.SelLength		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Restore(data as Variant)		  // Part of the Undoable interface.		  		  dim v as Dictionary = data		  mIgnoreEvents = true		  setText v.Value("txt")		  me.SelStart = v.Value("pos")		  me.SelLength = v.Value("len")		  TextChange()		  mIgnoreEvents = false		  		  mBackedUpText = theText		  mPreviousText = mBackedUpText		  mPreviousSelStart = me.SelStart		  mPreviousSelLength = me.SelLength		  		  mStartNewRecording = true		  		  #if UseLogWin		    showStatus "Restore"		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub setText(txt as String)		  if me.Styled then		    me.StyledText.RTFData = txt		  else		    me.Text = txt		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub showStatus(from as String)		  #if UseLogWin		    LogWin.AddLine "Status ("+from+"): lastpos "+Str(mPreviousSelStart)+", backedUp "+ReplaceLineEndings(mBackedUpText, " / ")+", prevTxt "+ReplaceLineEndings(mPreviousText, " / ")		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub StartUndoRecording()		  // to be called once the Text property has been set		  		  #if not TargetCocoa		    mIsSetup = true		    mBackedUpText = theText		    mPreviousText = mBackedUpText		    mStartNewRecording = true		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub StopUndoRecording()		  mIsSetup = false		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function theText() As String		  dim txt as String		  		  if me.Styled then		    txt = me.StyledText.RTFData		  else		    txt = me.Text		  end		  		  return txt		  		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event EnableMenuItems()	#tag EndHook	#tag Hook, Flags = &h0		Event LostFocus()	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event SelChange()	#tag EndHook	#tag Hook, Flags = &h0		Event TextChange()	#tag EndHook	#tag Hook, Flags = &h0		Event UndoAccessObj(objRef as Variant)	#tag EndHook	#tag Hook, Flags = &h0		Event Undoer() As UndoEngine	#tag EndHook	#tag Hook, Flags = &h0		Event UndoObjRef() As Variant	#tag EndHook	#tag Note, Name = About		Simple yet effective EditField with Undo functionality				There are quite a few attempts at a "proper" EditField with Undo support		(e.g. "UndoFlattenEdit" from <http://relevantlogic.com/realbasic.php> and		"Undo Toolkit" from <http://www.ravenna.com/~forbes/yonk/source/index.html>)				They all attempt to deal with the various ways of how text can be altered		in an EditField, trying to track deletions etc. by intercepting lots of Events.		I am not happy with that, as it's never guaranteed everything's covered.				So I came up with a much simpler solution, which is based on the original		rule of how Undo has to behave in a text editor:				- As long as one types continuously, let's call it a text block, it's all assumed		to be one typing event. And if one wants to undo typing, this entire block		is undone in one go.		- This block typing is only broken up by actions such as moving the text cursor		(by mouse or arrow keys - doesn't matter), moving to another UI control (i.e.		losing focus on the text field), pasting data and other actions that break the		flow of typing.				It can't get any simpler, can it?				The design of my code allows you do fine tune this easily, tough. If you want		to break typing once someone changes from typing characters to deleting them,		you can hook into the KeyDown event and call "doBackup true" from within		accordingly.				Oh, there's also one simplification in this code which one can consider sub-		optimal: Every time a block change is recorded for undo, the _entire_ current		text will be appended to the undo array. That means that if you edit a large		text of, say, 100KB in size, each time you type and then move the cursor, you'll		store another 100KB in memory for undo. One might think that this is wasteful,		and it is. And the above mentioned alternative Undo solutions handle this better.		But for most cases, I assume that the edited text will be significantly smaller, and		the resulting memory usage will be rather insignificant.			#tag EndNote	#tag Note, Name = Copyright, Contact		UndoEditField:		  Written by Thomas Tempelmann, 19 Feb 2008		  Released to the Public Domain, no rights reserved.		  Official URL: http://www.tempel.org/rb/#undoeditfield		  Contact: tt@tempel.org				UndoEngine, Undoable:		  Copyright 2000 by Matthias BÃ¼rcher, improved 2002 & 2008 by Thomas Tempelmann			#tag EndNote	#tag Note, Name = How it works		Most of the work is done inside "doBackup()", which gets called whenever		the text in the EditField changes (with "false" as argument), and also whenever		there's a break in the flow of typing (with "true" as argument).				Basically, there are two things that need to be monitored:				1.		When text is added, we need to know the state of what the text looked like		before the edit, so that we can back that up for an undo operation. This		is achieved by storing the new text in the property mPreviousText so that it		can be referred to the next time the Text is modified and needs backup.				2.		To tell when we need a backup, the two states mChanged and mStartNewRecording		are used. These help determine when a new typing block starts and while it		is still going on.				Hint: When you look at the code in doBackup(), you might want to remove		all the else cases with only a LogWin call in them. That'll clean up the code		and make it better readable.			#tag EndNote	#tag Note, Name = Styled Text		There is currently a problem with undoing Styled Text:				To work, we need to be able to save the current styled text state by creating a copy of it.				While normal text is stored as a String, which can be easily copied for this purpose,		the StyledText property of an EditField is a class object. And objects can't be duplicated		easily, only references to them can be copied.				Unfortunately, RB does not provide an easy way to duplicate an entire StyledText object.		So, in this version of the UndoEditField, I thought I could use a trick: StyledText.RTFData		returns the style info as a String, which then can be copied easily.				However, tests show that RTFData does not work reliably, at least not on Mac OS X (10.5.2):		For instance, if one pastes some text with a URL in it, e.g. taken from the IDE's Language		Reference, this text will change once it's converted to RTF. Hence, this demo deals with		this by converting all text to RTF and back while it is being entered (see TextChange event).		Another problem with RTFData is that it's awfully slow. Whenever a RTF conversion takes		place, it can take several seconds, even on the fastest CPUs.				So, I leave this to you as an exercise should you need a proper style preservation:		You'll need to write a function that creates a copy of a StyledText object, then retrieve		and assign it in the functions setText() and theText(). You'll also need a way to compare		two such objects, as used in the line "if mBackedUpText <> theText then" inside doBackup().				If you should succeed in a solution for this, please send it back to me so that I can make it		available to everyone.			#tag EndNote	#tag Note, Name = Usage		You need the following classes in your project:				- UndoEditField		- UndoEngine		- Undoable				(LogWin is only for debugging and its use can be enabled by setting the UseLogWin constant)				To use UndoEditField, drop it into a window, or change the Super of an EditField in a window to "UndoEditField".				Then add the following code to your window:				Add a property to the window, let's call it "mUndoer"		In the window's Open event, add the following code:		  mUndoer = new UndoEngine		In the UndoEditField control, implement the "Undoer" method with this code:		  return mUndoer		Lastly, whenever you have assigned a new text to the UndoEditField.Text property (or if you start with an		empty text), call these two methods:		  <theEditFieldName>.StartUndoRecording		  mUndoer.Reset				That's it.		Enjoy!			#tag EndNote	#tag Note, Name = Version (Changes)		v1.0.0, 19 Feb 2008:		  initial release		v1.0.1, 19 Feb 2008:		  added invocation of TextChanged event from Restore(), added setting of "dirty" state to window		v1.0.2, 19 Feb 2008:		  added support for styled text (see note!), improved demo to show how to deal with alternating 		  data in same edit field.		v1.0.2, 5 Feb 2011:		  just added a note "How Undo works" to UndoEngine, no code changes.			#tag EndNote	#tag Property, Flags = &h21		Private mBackedUpText As String	#tag EndProperty	#tag Property, Flags = &h21		Private mChanged As Boolean	#tag EndProperty	#tag Property, Flags = &h21		Private mIgnoreEvents As Boolean	#tag EndProperty	#tag Property, Flags = &h21		Private mIsSetup As Boolean	#tag EndProperty	#tag Property, Flags = &h21		Private mPreviousSelLength As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mPreviousSelStart As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mPreviousText As String	#tag EndProperty	#tag Property, Flags = &h21		Private mStartNewRecording As Boolean	#tag EndProperty	#tag Property, Flags = &h21		Private mUsePrevious As Boolean	#tag EndProperty	#tag Constant, Name = UseLogWin, Type = Boolean, Dynamic = False, Default = \"false", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Alignment"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="EditField"			#tag EnumValues				"0 - Default"				"1 - Left"				"2 - Center"				"3 - Right"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="BackColor"			Visible=true			Group="Appearance"			InitialValue="&hFFFFFF"			Type="Color"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Border"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Format"			Visible=true			Group="Appearance"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="22"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LimitText"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Mask"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Multiline"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Password"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ReadOnly"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Styled"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Text"			Visible=true			Group="Initial State"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextColor"			Visible=true			Group="Appearance"			InitialValue="&h000000"			Type="Color"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextUnit"			Visible=true			Group="Font"			InitialValue="0"			EditorType="Enum"			InheritedFrom="EditField"			#tag EnumValues				"0 - Default"				"1 - Pixel"				"2 - Point"				"3 - Inch"				"4 - Millimeter"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="80"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass